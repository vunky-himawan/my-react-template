/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as adminRouteRouteImport } from './routes/(admin)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as publicAuthRouteRouteImport } from './routes/(public)/auth/route'
import { Route as adminRolesIndexRouteImport } from './routes/(admin)/roles/index'
import { Route as adminPermissionsIndexRouteImport } from './routes/(admin)/permissions/index'
import { Route as adminDashboardIndexRouteImport } from './routes/(admin)/dashboard/index'
import { Route as publicAuthSignInIndexRouteImport } from './routes/(public)/auth/sign-in/index'
import { Route as adminPermissionsPermissionIdUpdateIndexRouteImport } from './routes/(admin)/permissions/$permissionId/update/index'

const adminRouteRoute = adminRouteRouteImport.update({
  id: '/(admin)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicAuthRouteRoute = publicAuthRouteRouteImport.update({
  id: '/(public)/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const adminRolesIndexRoute = adminRolesIndexRouteImport.update({
  id: '/roles/',
  path: '/roles/',
  getParentRoute: () => adminRouteRoute,
} as any)
const adminPermissionsIndexRoute = adminPermissionsIndexRouteImport.update({
  id: '/permissions/',
  path: '/permissions/',
  getParentRoute: () => adminRouteRoute,
} as any)
const adminDashboardIndexRoute = adminDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => adminRouteRoute,
} as any)
const publicAuthSignInIndexRoute = publicAuthSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => publicAuthRouteRoute,
} as any)
const adminPermissionsPermissionIdUpdateIndexRoute =
  adminPermissionsPermissionIdUpdateIndexRouteImport.update({
    id: '/permissions/$permissionId/update/',
    path: '/permissions/$permissionId/update/',
    getParentRoute: () => adminRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof adminRouteRouteWithChildren
  '/auth': typeof publicAuthRouteRouteWithChildren
  '/dashboard': typeof adminDashboardIndexRoute
  '/permissions': typeof adminPermissionsIndexRoute
  '/roles': typeof adminRolesIndexRoute
  '/auth/sign-in': typeof publicAuthSignInIndexRoute
  '/permissions/$permissionId/update': typeof adminPermissionsPermissionIdUpdateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof adminRouteRouteWithChildren
  '/auth': typeof publicAuthRouteRouteWithChildren
  '/dashboard': typeof adminDashboardIndexRoute
  '/permissions': typeof adminPermissionsIndexRoute
  '/roles': typeof adminRolesIndexRoute
  '/auth/sign-in': typeof publicAuthSignInIndexRoute
  '/permissions/$permissionId/update': typeof adminPermissionsPermissionIdUpdateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(admin)': typeof adminRouteRouteWithChildren
  '/(public)/auth': typeof publicAuthRouteRouteWithChildren
  '/(admin)/dashboard/': typeof adminDashboardIndexRoute
  '/(admin)/permissions/': typeof adminPermissionsIndexRoute
  '/(admin)/roles/': typeof adminRolesIndexRoute
  '/(public)/auth/sign-in/': typeof publicAuthSignInIndexRoute
  '/(admin)/permissions/$permissionId/update/': typeof adminPermissionsPermissionIdUpdateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/permissions'
    | '/roles'
    | '/auth/sign-in'
    | '/permissions/$permissionId/update'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/permissions'
    | '/roles'
    | '/auth/sign-in'
    | '/permissions/$permissionId/update'
  id:
    | '__root__'
    | '/'
    | '/(admin)'
    | '/(public)/auth'
    | '/(admin)/dashboard/'
    | '/(admin)/permissions/'
    | '/(admin)/roles/'
    | '/(public)/auth/sign-in/'
    | '/(admin)/permissions/$permissionId/update/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  adminRouteRoute: typeof adminRouteRouteWithChildren
  publicAuthRouteRoute: typeof publicAuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(admin)': {
      id: '/(admin)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof adminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/auth': {
      id: '/(public)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof publicAuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(admin)/roles/': {
      id: '/(admin)/roles/'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof adminRolesIndexRouteImport
      parentRoute: typeof adminRouteRoute
    }
    '/(admin)/permissions/': {
      id: '/(admin)/permissions/'
      path: '/permissions'
      fullPath: '/permissions'
      preLoaderRoute: typeof adminPermissionsIndexRouteImport
      parentRoute: typeof adminRouteRoute
    }
    '/(admin)/dashboard/': {
      id: '/(admin)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof adminDashboardIndexRouteImport
      parentRoute: typeof adminRouteRoute
    }
    '/(public)/auth/sign-in/': {
      id: '/(public)/auth/sign-in/'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof publicAuthSignInIndexRouteImport
      parentRoute: typeof publicAuthRouteRoute
    }
    '/(admin)/permissions/$permissionId/update/': {
      id: '/(admin)/permissions/$permissionId/update/'
      path: '/permissions/$permissionId/update'
      fullPath: '/permissions/$permissionId/update'
      preLoaderRoute: typeof adminPermissionsPermissionIdUpdateIndexRouteImport
      parentRoute: typeof adminRouteRoute
    }
  }
}

interface adminRouteRouteChildren {
  adminDashboardIndexRoute: typeof adminDashboardIndexRoute
  adminPermissionsIndexRoute: typeof adminPermissionsIndexRoute
  adminRolesIndexRoute: typeof adminRolesIndexRoute
  adminPermissionsPermissionIdUpdateIndexRoute: typeof adminPermissionsPermissionIdUpdateIndexRoute
}

const adminRouteRouteChildren: adminRouteRouteChildren = {
  adminDashboardIndexRoute: adminDashboardIndexRoute,
  adminPermissionsIndexRoute: adminPermissionsIndexRoute,
  adminRolesIndexRoute: adminRolesIndexRoute,
  adminPermissionsPermissionIdUpdateIndexRoute:
    adminPermissionsPermissionIdUpdateIndexRoute,
}

const adminRouteRouteWithChildren = adminRouteRoute._addFileChildren(
  adminRouteRouteChildren,
)

interface publicAuthRouteRouteChildren {
  publicAuthSignInIndexRoute: typeof publicAuthSignInIndexRoute
}

const publicAuthRouteRouteChildren: publicAuthRouteRouteChildren = {
  publicAuthSignInIndexRoute: publicAuthSignInIndexRoute,
}

const publicAuthRouteRouteWithChildren = publicAuthRouteRoute._addFileChildren(
  publicAuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  adminRouteRoute: adminRouteRouteWithChildren,
  publicAuthRouteRoute: publicAuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
